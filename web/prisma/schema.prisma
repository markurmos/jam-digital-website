// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  avatar        String?
  orders        Order[]
  cart          Cart?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  sku           String    @unique
  name          String
  description   String?
  price         Decimal   @db.Decimal(10, 2)
  cost          Decimal   @db.Decimal(10, 2)
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  brand         String?
  images        ProductImage[]
  stock         Int       @default(0)
  orderItems    OrderItem[]
  cartItems     CartItem[]
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([sku])
  @@index([categoryId])
}

model Category {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  parentId      String?
  parent        Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryToCategory")
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([slug])
}

model ProductImage {
  id            String    @id @default(cuid())
  url           String
  alt           String?
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  
  @@index([productId])
}

model Order {
  id            String    @id @default(cuid())
  orderNumber   String    @unique
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  items         OrderItem[]
  subtotal      Decimal   @db.Decimal(10, 2)
  tax           Decimal   @db.Decimal(10, 2)
  shipping      Decimal   @db.Decimal(10, 2)
  total         Decimal   @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  shippingAddress Json
  billingAddress  Json
  paymentMethod   String?
  paymentId       String?
  notes          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([orderNumber])
}

model OrderItem {
  id            String    @id @default(cuid())
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  price         Decimal   @db.Decimal(10, 2)
  total         Decimal   @db.Decimal(10, 2)
  
  @@index([orderId])
  @@index([productId])
}

model Cart {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  items         CartItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CartItem {
  id            String    @id @default(cuid())
  cart          Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId        String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

enum Role {
  USER
  ADMIN
  MANAGER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
